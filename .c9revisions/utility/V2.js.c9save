{"ts":1350097637005,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1350097642075,"patch":[[{"diffs":[[1,"/*\r\n  A simple vector2 class. Each operation returns a new vector2, so beware of garbage collection!\r\n  \r\n  TODO: Make side effecting versions of the functions below for performance benefits.\r\n*/\r\nfunction V2(x, y) {\r\n    if (typeof x === 'undefined' || typeof y === 'undefined') {\r\n        this.X = 0;\r\n        this.Y = 0;\r\n    } else {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n    \r\n    /*\r\n      Checks the value passed in to make sure it's a Vector2.\r\n    */\r\n    var IsVector2 = function (value) {\r\n        return value.constructor === V2;\r\n    };\r\n    \r\n    this.IsVector2 = IsVector2;\r\n    \r\n    /*\r\n      Performs a Dot on this V2 and the V2 passed in.\r\n    */\r\n    this.Dot = function(vec2) {\r\n        return (this.X * vec2.X + this.Y * vec2.Y); \r\n    }\r\n\r\n    /*\r\n      Returns the Length of the V2. It should be noted that LengthSqr should be used\r\n      for greater performance.\r\n    */\r\n    this.Length = function() {\r\n        return Math.sqrt(this.Dot(this)); \r\n    }\r\n\r\n    /*\r\n      Returns the length * length of the V2. Faster than V2.Length as it does not\r\n      make a Math.sqrt call.\r\n    */\r\n    this.LengthSqr = function() { \r\n        return this.Dot(this); \r\n    }\r\n    \r\n    /*\r\n      Returns the Absolute value for this vector's X and Y in a new V2.\r\n    */\r\n    this.Abs = function() {\r\n        this.X = Math.abs(this.X);\r\n        this.Y = Math.abs(this.Y);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n      Returns the unit length V2 (vector components divided by length)\r\n    */\r\n    this.Normalize = function() {\r\n        var vlen = this.Length();\r\n        this.X = (this.X / vlen);\r\n        this.Y = (this.Y / vlen);\r\n        return this;\r\n    }\r\n    \r\n    /*\r\n      Returns the product of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Multiply = function (value) {\r\n        if (IsVector2(value)) {\r\n            this.X = (this.X * value.X);\r\n            this.Y = (this.Y * value.Y);\r\n            return this;\r\n        } else {\r\n            this.X = (this.X * value);\r\n            this.Y = (this.Y * value);\r\n            return this;\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the divisor of this vector and a scalar passed in.\r\n    */\r\n    this.Divide = function(value) {\r\n        this.X = (this.X / value);\r\n        this.Y = (this.Y / value);\r\n        return this;\r\n    }\r\n    \r\n    /*\r\n      Returns the sum of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Add = function(value) {\r\n        if (IsVector2(value)) {\r\n            this.X = (this.X + value.X);\r\n            this.Y = (this.Y + value.Y);\r\n            return this;\r\n        } else {\r\n            this.X = (this.X + value);\r\n            this.Y = (this.Y + value);\r\n            return this;\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the difference of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Sub = function(value) {\r\n        if (IsVector2(value)) { \r\n            this.X = (this.X - value.X);\r\n            this.Y = (this.Y - value.Y);\r\n            return this;\r\n        } else {\r\n            this.X = (this.X - value);\r\n            this.Y = (this.Y - value);\r\n            return this;\r\n        }\r\n    }\r\n    \r\n    this.Init = function(_x, _y) {\r\n        this.X = _x;\r\n        this.Y = _y;\r\n        return this;\r\n    }\r\n    \r\n    this.InitFromV2 = function(vec2) {\r\n        this.X = vec2.X;\r\n        this.Y = vec2.Y;\r\n        return this;\r\n    }\r\n    \r\n    this.Copy = function() {\r\n        return new V2(this.X, this.Y);\r\n    }\r\n    \r\n    this.AsImmutable = function() {\r\n        return new ImmutableV2(this.X, this.Y);\r\n    }\r\n}\r\n\r\n\r\nfunction ImmutableV2(x, y) {\r\n    if (typeof x === 'undefined' || typeof y === 'undefined') {\r\n        this.X = 0;\r\n        this.Y = 0;\r\n    } else {\r\n        this.X = x;\r\n        this.Y = y;\r\n    }\r\n    \r\n    /*\r\n      Checks the value passed in to make sure it's a Vector2.\r\n    */\r\n    var IsVector2 = function (value) {\r\n        return value.constructor === V2;\r\n    };\r\n    \r\n    /*\r\n      Performs a Dot on this V2 and the V2 passed in.\r\n    */\r\n    this.Dot = function(vec2) {\r\n        return (this.X * vec2.X + this.Y * vec2.Y); \r\n    }\r\n\r\n    /*\r\n      Returns the Length of the V2. It should be noted that LengthSqr should be used\r\n      for greater performance.\r\n    */\r\n    this.Length = function() {\r\n        return Math.sqrt(this.Dot(this)); \r\n    }\r\n\r\n    /*\r\n      Returns the length * length of the V2. Faster than V2.Length as it does not\r\n      make a Math.sqrt call.\r\n    */\r\n    this.LengthSqr = function() { \r\n        return this.Dot(this); \r\n    }\r\n    \r\n    /*\r\n      Returns the Absolute value for this vector's X and Y in a new V2.\r\n    */\r\n    this.Abs = function() {\r\n        return new V2(Math.abs(this.X), Math.abs(this.Y));\r\n    }\r\n\r\n    /*\r\n      Returns the unit length V2 (vector components divided by length)\r\n    */\r\n    this.Normalize = function() {\r\n        var vlen = this.Length();\r\n        return new V2(this.X / vlen, this.Y / vlen);\r\n    }\r\n    \r\n    /*\r\n      Returns the product of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Multiply = function (value) {\r\n        if (IsVector2(value)) {\r\n            return new V2(this.X * value.X, this.Y * value.Y);\r\n        } else {\r\n            return new V2(this.X * value, this.Y * value);   \r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the divisor of this vector and a scalar passed in.\r\n    */\r\n    this.Divide = function(value) {\r\n        return new V2(this.X / value, this.Y / value); \r\n    }\r\n    \r\n    /*\r\n      Returns the sum of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Add = function(value) {\r\n        if (IsVector2(value)) {\r\n            return new V2(this.X + value.X, this.Y + value.Y); \r\n        } else {\r\n            return new V2(this.X + value, this.Y + value);\r\n        }\r\n    }\r\n    \r\n    /*\r\n      Returns the difference of this vector and either a scalar or a V2 passed in.\r\n    */\r\n    this.Sub = function(value) {\r\n        if (IsVector2(value)) { \r\n            return new V2(this.X - value.X, this.Y - value.Y);\r\n        } else {\r\n            return new V2(this.X - value, this.Y - value); \r\n        }\r\n    }\r\n    \r\n    this.AsMutable = function() {\r\n        return new V2(this.X, this.Y);\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":6275}]],"length":6275,"saved":false}
{"contributors":[],"silentsave":false,"ts":1350346723022,"patch":[[{"diffs":[[0,"nstructor === V2"],[1," || value.constructor === ImmutableV2"],[0,";\r\n    };\r\n    \r"]],"start1":536,"start2":536,"length1":32,"length2":69},{"diffs":[[0,"r === V2"],[1," || value.constructor === ImmutableV2"],[0,";\r\n    }"]],"start1":4005,"start2":4005,"length1":16,"length2":53},{"diffs":[[0,"this)); \r\n    }\r"],[1,"\n    \r\n    this.Perpindicular = function() {\r\n        return new ImmutableV2(-Y, X);\r\n    }\r"],[0,"\n\r\n    /*\r\n     "]],"start1":4434,"start2":4434,"length1":32,"length2":124}]],"length":6441,"saved":false}
{"ts":1350346747064,"patch":[[{"diffs":[[0,"urn new "],[-1,""],[0,""],[1,"Immutable"],[0,"V2(Math."]],"start1":4885,"start2":4885,"length1":16,"length2":25},{"diffs":[[0,"     return new "],[-1,""],[0,""],[1,"Immutable"],[0,"V2(this.X / vlen"]],"start1":5113,"start2":5113,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X * valu"]],"start1":5363,"start2":5363,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X * valu"]],"start1":5454,"start2":5454,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[-1,""],[0,""],[1,"Immutable"],[0,"V2(this.X / valu"]],"start1":5665,"start2":5665,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X + valu"]],"start1":5908,"start2":5908,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X + valu"]],"start1":6000,"start2":6000,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X - valu"]],"start1":6261,"start2":6261,"length1":32,"length2":41},{"diffs":[[0,"     return new "],[1,"Immutable"],[0,"V2(this.X - valu"]],"start1":6352,"start2":6352,"length1":32,"length2":41}]],"length":6522,"saved":false}
{"ts":1350347011675,"patch":[[{"diffs":[[0,"ableV2(-"],[1,"this."],[0,"Y, X);\r\n"]],"start1":4520,"start2":4520,"length1":16,"length2":21}]],"length":6527,"saved":false}
{"ts":1350347015328,"patch":[[{"diffs":[[0,"this.Y, "],[1,"this."],[0,"X);\r\n   "]],"start1":4528,"start2":4528,"length1":16,"length2":21}]],"length":6532,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351017539099,"patch":[[{"diffs":[[0,"\n    }\r\n"],[1,"    \r\n    this.ToRadians = function() {\r\n        return Math.atan2(this.Y, this.X);\r\n    }\r\n"],[0,"}\r\n\r\n\r\nf"]],"start1":3634,"start2":3634,"length1":16,"length2":108},{"diffs":[[0,"his.Y);\r\n    }\r\n"],[1,"    \r\n    this.ToRadians = function() {\r\n        return Math.atan2(this.Y, this.X);\r\n    }\r\n"],[0,"}"]],"start1":6607,"start2":6607,"length1":17,"length2":109}]],"length":6716,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351296300324,"patch":[[{"diffs":[[0,"\r\n    };\r\n    \r\n"],[1,"    this.Equals = function(vec2) {\r\n        return IsVector2(vec2) && this.X == vec2.X && this.Y == vec2.Y;\r\n    };\r\n    \r\n"],[0,"    /*\r\n      Pe"]],"start1":4143,"start2":4143,"length1":32,"length2":155}]],"length":6839,"saved":false}
